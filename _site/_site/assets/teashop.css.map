{
  "version": 3,
  "sources": ["AnimatedStat.svelte", "Teashop.svelte"],
  "sourcesContent": ["<script>\n    export let value = 0;\n    export let label = \"\";\n\n    let displayValue = value;\n    let valueToAdd = 0;\n    let countInterval;\n\n    $: if (value !== displayValue + valueToAdd) {\n        const difference = value - (displayValue + valueToAdd);\n        valueToAdd += difference;\n        if (!countInterval) {\n            countInterval = setInterval(updateValue, 50);\n        }\n    }\n\n    function updateValue() {\n        if (valueToAdd > 0) {\n            let increment = Math.max(1, Math.floor(valueToAdd / 10));\n            displayValue += increment;\n            valueToAdd -= increment;\n        } else if (valueToAdd < 0) {\n            let decrement = Math.min(-1, Math.floor(valueToAdd / 10));\n            displayValue += decrement;\n            valueToAdd -= decrement;\n        } else {\n            clearInterval(countInterval);\n            countInterval = null;\n        }\n    }\n\n    import { onDestroy } from \"svelte\";\n    onDestroy(() => {\n        if (countInterval) clearInterval(countInterval);\n    });\n</script>\n\n<p class=\"label stat-display\" class:animating={valueToAdd !== 0}>\n    {label}: {displayValue}\n</p>\n\n<style>\n    .stat-display {\n        transition: color 0.1s;\n    }\n\n    .stat-display.animating {\n        color: #4caf50;\n    }\n</style>\n", "<script>\n    import { TIMINGS, POINTS, TEA } from \"../config.js\";\n    import GardenPlot from \"./GardenPlot.svelte\";\n    import Teapot from \"./Teapot.svelte\";\n    import Shop from \"./Shop.svelte\";\n    import AnimatedStat from \"./AnimatedStat.svelte\";\n    import { timeOfDay, isDaytime } from \"../stores.js\";\n    import { onMount, onDestroy } from \"svelte\";\n    import { createEventDispatcher } from \"svelte\";\n    const dispatch = createEventDispatcher();\n\n    let lastSavedTime = null;\n    let grownPlants = 0;\n    let readyToHarvest = 0;\n    let harvestedTeas = { green: 0 };\n    let brewedTea = 0;\n    let brewedTeas = { green: 0 };\n    let nextServed = null;\n    let servedTea = 0;\n    let points = 0;\n    let gardenPlots = 1;\n    let teapots = 1;\n    let currentTime = \"sunrise\";\n    let cycleInterval;\n    let automationIntervals = [];\n    let unlockedTeaTypes = {\n        green: true,\n    };\n\n    let teaStats = {\n        current: {\n            ready: { total: 0, byType: {} },\n            harvested: { total: 0, byType: {} },\n            brewed: { total: 0, byType: {} },\n        },\n        lifetime: {\n            grown: { total: 0, byType: {} },\n            harvested: { total: 0, byType: {} },\n            brewed: { total: 0, byType: {} },\n            served: { total: 0, byType: {} },\n        },\n    };\n\n    const QUARTERS = [\"sunrise\", \"day\", \"sunset\", \"night\"];\n\n    let toasts = [];\n    let toastId = 0;\n\n    let sprites = {\n        garden: 0,\n        harvest: 0,\n        brewmaster: 0,\n        cafe: 0,\n    };\n\n    let workingSprites = {\n        garden: 0,\n        harvest: 0,\n        brewmaster: 0,\n        cafe: 0,\n    };\n\n    let plotRefs = [];\n    let teapotRefs = [];\n\n    $: {\n        plotRefs = [...Array(gardenPlots)].map((_, i) => plotRefs[i] || null);\n        console.log(\"Updated plotRefs:\", plotRefs);\n    }\n\n    $: {\n        teapotRefs = [...Array(teapots)].map((_, i) => teapotRefs[i] || null);\n        console.log(\"Updated teapotRefs:\", teapotRefs);\n    }\n\n    $: {\n        teaStats = {\n            current: {\n                ready: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.current?.ready || {}),\n                },\n                harvested: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.current?.harvested || {}),\n                },\n                brewed: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.current?.brewed || {}),\n                },\n            },\n            lifetime: {\n                grown: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.lifetime?.grown || {}),\n                },\n                harvested: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.lifetime?.harvested || {}),\n                },\n                brewed: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.lifetime?.brewed || {}),\n                },\n                served: {\n                    total: 0,\n                    byType: {},\n                    ...(teaStats?.lifetime?.served || {}),\n                },\n            },\n        };\n    }\n\n    function createToast(message = \"hiya!\", points = null, type = \"default\") {\n        const id = toastId++;\n        const x = Math.random() * 40 - 20;\n        const toast = {\n            id,\n            x,\n            y: 0,\n            opacity: 1,\n            points,\n            message,\n            type,\n        };\n        toasts = [...toasts, toast];\n\n        setTimeout(() => {\n            toasts = toasts.filter((t) => t.id !== id);\n        }, 2000);\n    }\n\n    function startDayCycle() {\n        const savedState = localStorage.getItem(\"teashopGameState\");\n        if (savedState) {\n            const gameState = JSON.parse(savedState);\n            currentTime = gameState.currentTime || \"sunrise\";\n        }\n\n        timeOfDay.set(currentTime);\n        isDaytime.set(currentTime !== \"night\");\n\n        if (cycleInterval) clearInterval(cycleInterval);\n        cycleInterval = setInterval(() => {\n            const currentIndex = QUARTERS.indexOf(currentTime);\n            const nextIndex = (currentIndex + 1) % QUARTERS.length;\n            currentTime = QUARTERS[nextIndex];\n\n            timeOfDay.set(currentTime);\n            isDaytime.set(currentTime !== \"night\");\n\n            if (currentTime === \"sunrise\") {\n                createToast(\"The sun is rising!\", null, \"sunrise\");\n            } else if (currentTime === \"sunset\") {\n                createToast(\"The sun is setting!\", null, \"sunset\");\n            } else if (currentTime === \"night\") {\n                createToast(\"Shh...sprites are sleeping...\", null, \"night\");\n            }\n\n            // Save state whenever time changes\n            saveGameState();\n        }, TIMINGS.QUARTER_DURATION);\n    }\n\n    function handlePurchase(event) {\n        const { item, cost, spriteType, teaType } = event.detail;\n\n        if (item === \"gardenPlot\") {\n            gardenPlots += 1;\n            points -= cost;\n        } else if (item === \"teapot\") {\n            teapots += 1;\n            points -= cost;\n        } else if (item === \"teaType\") {\n            unlockedTeaTypes[teaType] = true;\n            points -= cost;\n        } else if (item === \"sprite\") {\n            sprites[spriteType] += 1;\n            points -= cost;\n            console.log(\"Updated sprites:\", sprites);\n            startAutomation();\n        }\n    }\n\n    function handlePlantReady(event) {\n        const { teaType } = event.detail;\n        readyToHarvest++;\n\n        teaStats.current.ready.byType[teaType] = Math.max(\n            (teaStats.current.ready.byType[teaType] || 0) + 1,\n            0,\n        );\n        teaStats.current.ready.total = Math.max(readyToHarvest, 0);\n    }\n\n    function handlePlantComplete(event) {\n        const { teaType } = event.detail;\n        harvestedTeas[teaType] = (harvestedTeas[teaType] || 0) + 2;\n\n        teaStats.current.harvested.byType[teaType] = harvestedTeas[teaType];\n        teaStats.current.harvested.total = Object.values(harvestedTeas).reduce(\n            (sum, val) => sum + val,\n            0,\n        );\n\n        teaStats.lifetime.grown.byType[teaType] =\n            (teaStats.lifetime.grown.byType[teaType] || 0) + 2;\n        teaStats.lifetime.grown.total += 2;\n        teaStats.lifetime.harvested.byType[teaType] =\n            (teaStats.lifetime.harvested.byType[teaType] || 0) + 2;\n        teaStats.lifetime.harvested.total += 2;\n    }\n\n    function handleHarvestStart(event) {\n        const { teaType } = event.detail;\n        readyToHarvest = Math.max(readyToHarvest - 1, 0); // Add safeguard\n        console.log(\n            `Harvest started: ${teaType}, total ready: ${readyToHarvest}`,\n        );\n\n        // Update ready stats with safeguard\n        teaStats.current.ready.byType[teaType] = Math.max(\n            (teaStats.current.ready.byType[teaType] || 0) - 1,\n            0,\n        );\n        teaStats.current.ready.total = readyToHarvest;\n    }\n\n    function handleHarvestedTea(event) {\n        const { teaType } = event.detail;\n        if (harvestedTeas[teaType] > 0) {\n            harvestedTeas[teaType]--;\n            harvestedTeas = { ...harvestedTeas };\n\n            // Update current harvested stats\n            teaStats.current.harvested.byType[teaType] = harvestedTeas[teaType];\n            teaStats.current.harvested.total = Object.values(\n                harvestedTeas,\n            ).reduce((sum, val) => sum + val, 0);\n        }\n    }\n\n    function handleBrewedTea(event) {\n        const { teaType } = event.detail;\n        brewedTeas[teaType] = (brewedTeas[teaType] || 0) + 1;\n        brewedTeas = { ...brewedTeas };\n        brewedTea += 1;\n\n        // Update current stats\n        teaStats.current.brewed.byType = { ...brewedTeas };\n        teaStats.current.brewed.total = brewedTea;\n\n        // Update lifetime stats\n        teaStats.lifetime.brewed.byType[teaType] =\n            (teaStats.lifetime.brewed.byType[teaType] || 0) + 1;\n        teaStats.lifetime.brewed.total += 1;\n    }\n\n    function serveTea() {\n        for (const [type, amount] of Object.entries(brewedTeas)) {\n            if (amount > 0) {\n                const pointsEarned =\n                    TEA[type].pointValue +\n                    sprites.cafe * POINTS.CAFE_SPRITE_BONUS;\n\n                brewedTeas[type]--;\n                brewedTea--;\n                servedTea++;\n                points += pointsEarned;\n                nextServed = type;\n\n                // Update current brewed stats\n                teaStats.current.brewed.byType[type] = brewedTeas[type];\n                teaStats.current.brewed.total = Object.values(\n                    brewedTeas,\n                ).reduce((sum, val) => sum + val, 0);\n\n                // Update lifetime stats\n                teaStats.lifetime.served.byType[type] =\n                    (teaStats.lifetime.served.byType[type] || 0) + 1;\n                teaStats.lifetime.served.total += 1;\n\n                dispatch(\"teaServed\");\n                createToast(`+${pointsEarned} points!`, pointsEarned);\n                console.log(`Tea served: ${type}, points: ${pointsEarned}`);\n                return;\n            }\n        }\n    }\n\n    function startAutomation() {\n        // Clear existing intervals\n        automationIntervals.forEach((interval) => clearInterval(interval));\n        automationIntervals = [];\n\n        // Harvest Sprites\n        if (sprites.harvest > 0) {\n            const interval = setInterval(() => {\n                if ($isDaytime && workingSprites.harvest < sprites.harvest) {\n                    for (let i = 0; i < plotRefs.length; i++) {\n                        const plot = plotRefs[i];\n                        if (plot) {\n                            const state = plot.getState();\n                            if (state.readyToHarvest && !state.isHarvesting) {\n                                workingSprites.harvest += 1;\n                                plot.harvest();\n                                setTimeout(() => {\n                                    workingSprites.harvest -= 1;\n                                }, TIMINGS.HARVEST_TIME); // Harvest time is constant\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Brewmaster Sprites\n        if (sprites.brewmaster > 0) {\n            const interval = setInterval(() => {\n                if (\n                    $isDaytime &&\n                    workingSprites.brewmaster < sprites.brewmaster &&\n                    Object.values(harvestedTeas).some((amount) => amount > 0)\n                ) {\n                    for (let i = 0; i < teapotRefs.length; i++) {\n                        const teapot = teapotRefs[i];\n                        if (teapot) {\n                            const state = teapot.getState();\n                            if (!state.isBrewing) {\n                                workingSprites.brewmaster += 1;\n                                teapot.brewTea();\n                                // Wait for the type of tea being brewed\n                                const checkAndRelease = setInterval(() => {\n                                    const currentState = teapot.getState();\n                                    if (currentState.currentTeaType) {\n                                        clearInterval(checkAndRelease);\n                                        setTimeout(() => {\n                                            workingSprites.brewmaster -= 1;\n                                        }, TEA[currentState.currentTeaType].brewTime);\n                                    }\n                                }, 100);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Garden Sprites\n        if (sprites.garden > 0) {\n            const interval = setInterval(() => {\n                if ($isDaytime && workingSprites.garden < sprites.garden) {\n                    for (let i = 0; i < plotRefs.length; i++) {\n                        const plot = plotRefs[i];\n                        if (plot) {\n                            const state = plot.getState();\n                            // Add isHarvesting check to prevent planting while harvesting\n                            if (\n                                !state.isGrowing &&\n                                !state.readyToHarvest &&\n                                !state.isHarvesting\n                            ) {\n                                workingSprites.garden += 1;\n                                const selectedTeaType =\n                                    state.selectedTeaType || \"green\";\n                                plot.plantTea();\n                                setTimeout(() => {\n                                    workingSprites.garden -= 1;\n                                }, TEA[selectedTeaType].growTime);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Cafe Sprites\n        if (sprites.cafe > 0) {\n            const interval = setInterval(() => {\n                if (\n                    $isDaytime &&\n                    workingSprites.cafe < sprites.cafe &&\n                    brewedTea > 0\n                ) {\n                    // Check brewedTea > 0\n                    workingSprites.cafe += 1;\n                    serveTea(); // This will handle one cup\n                    // Serving is instant, but add a small cooldown\n                    setTimeout(() => {\n                        workingSprites.cafe -= 1;\n                    }, TIMINGS.SERVE_COOLDOWN);\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n    }\n\n    function saveGameState() {\n        const gameState = {\n            lastSaved: Date.now(),\n            currentTime,\n            grownPlants,\n            readyToHarvest,\n            harvestedTeas,\n            unlockedTeaTypes,\n            brewedTea,\n            brewedTeas,\n            servedTea,\n            teaStats,\n            points,\n            gardenPlots,\n            teapots,\n            sprites,\n            plotStates: plotRefs.map((plot) => (plot ? plot.getState() : null)),\n            teapotStates: teapotRefs.map((teapot) =>\n                teapot ? teapot.getState() : null,\n            ),\n        };\n        try {\n            localStorage.setItem(\"teashopGameState\", JSON.stringify(gameState));\n            lastSavedTime = new Date();\n            localStorage.setItem(\"cycleStartTime\", Date.now().toString());\n            createToast(\"Game saved! 💾\", null, \"success\"); // New save notification\n            console.log(\"Game state saved\");\n        } catch (e) {\n            console.error(\"Failed to save game state:\", e);\n            createToast(\"Error saving!\", null, \"error\"); // Error notification\n        }\n    }\n\n    function loadGameState() {\n        const savedState = localStorage.getItem(\"teashopGameState\");\n        if (savedState) {\n            const gameState = JSON.parse(savedState);\n            grownPlants = gameState.grownPlants;\n            readyToHarvest = gameState.readyToHarvest || 0;\n            harvestedTeas = gameState.harvestedTeas || { green: 0 };\n            unlockedTeaTypes = gameState.unlockedTeaTypes || { green: true };\n            brewedTea = gameState.brewedTea;\n            brewedTeas = gameState.brewedTeas || { green: 0 };\n            servedTea = gameState.servedTea;\n            points = gameState.points;\n            gardenPlots = gameState.gardenPlots;\n            teapots = gameState.teapots;\n            sprites = gameState.sprites;\n            currentTime = gameState.currentTime || \"sunrise\";\n            timeOfDay.set(currentTime);\n            isDaytime.set(currentTime !== \"night\");\n            teaStats = gameState.teaStats || {\n                current: {\n                    ready: { total: 0, byType: {} },\n                    harvested: { total: 0, byType: {} },\n                    brewed: { total: 0, byType: {} },\n                },\n                lifetime: {\n                    grown: { total: 0, byType: {} },\n                    harvested: { total: 0, byType: {} },\n                    brewed: { total: 0, byType: {} },\n                    served: { total: 0, byType: {} },\n                },\n            };\n\n            setTimeout(() => {\n                gameState.plotStates.forEach((state, i) => {\n                    if (state && plotRefs[i]) {\n                        plotRefs[i].setState(state);\n                    }\n                });\n\n                gameState.teapotStates.forEach((state, i) => {\n                    if (state && teapotRefs[i]) {\n                        teapotRefs[i].setState(state);\n                    }\n                });\n            }, 100);\n\n            console.log(\"Game loaded\");\n        }\n    }\n\n    function resetGame() {\n        localStorage.removeItem(\"teashopGameState\");\n        readyToHarvest = 0;\n        harvestedTeas = { green: 0 };\n        brewedTeas = { green: 0 };\n        unlockedTeaTypes = { green: true };\n        brewedTea = 0;\n        servedTea = 0;\n        points = 0;\n        gardenPlots = 1;\n        teapots = 1;\n        sprites = {\n            garden: 0,\n            harvest: 0,\n            brewmaster: 0,\n            cafe: 0,\n        };\n        workingSprites = {\n            garden: 0,\n            harvest: 0,\n            brewmaster: 0,\n            cafe: 0,\n        };\n        teaStats = {\n            current: {\n                ready: { total: 0, byType: {} },\n                harvested: { total: 0, byType: {} },\n                brewed: { total: 0, byType: {} },\n            },\n            lifetime: {\n                grown: { total: 0, byType: {} },\n                harvested: { total: 0, byType: {} },\n                brewed: { total: 0, byType: {} },\n                served: { total: 0, byType: {} },\n            },\n        };\n\n        // Reset all garden plots\n        plotRefs.forEach((plot) => {\n            if (plot) {\n                plot.setState({\n                    isGrowing: false,\n                    readyToHarvest: false,\n                    progress: 0,\n                });\n            }\n        });\n\n        // Reset all teapots\n        teapotRefs.forEach((teapot) => {\n            if (teapot) {\n                teapot.setState({\n                    isBrewing: false,\n                    progress: 0,\n                    currentTeaType: null,\n                });\n            }\n        });\n\n        automationIntervals.forEach((interval) => clearInterval(interval));\n        automationIntervals = [];\n        startAutomation();\n\n        currentTime = \"sunrise\";\n        timeOfDay.set(currentTime);\n        isDaytime.set(true);\n\n        // Clear and restart time cycle\n        if (cycleInterval) clearInterval(cycleInterval);\n        startDayCycle();\n\n        createToast(\"A fresh start!\");\n    }\n\n    onMount(() => {\n        console.log(\"Component mounted\");\n        loadGameState();\n        startDayCycle();\n        startAutomation();\n\n        const autosaveInterval = setInterval(saveGameState, 30000); // Save every 30 seconds\n        automationIntervals.push(autosaveInterval);\n\n        // Save game state when the page is hidden (user switches tabs)\n        document.addEventListener(\"visibilitychange\", () => {\n            if (document.hidden) {\n                saveGameState();\n            }\n        });\n\n        // Save game state before the page is unloaded\n        window.addEventListener(\"beforeunload\", () => {\n            saveGameState();\n        });\n    });\n\n    onDestroy(() => {\n        automationIntervals.forEach((interval) => clearInterval(interval));\n        if (cycleInterval) clearInterval(cycleInterval);\n    });\n</script>\n\n<div class=\"teashop\">\n    <div\n        class=\"time-indicator\"\n        class:sunrise={currentTime === \"sunrise\"}\n        class:day={currentTime === \"day\"}\n        class:sunset={currentTime === \"sunset\"}\n        class:night={currentTime === \"night\"}\n    >\n        <p class=\"label\">Current Time: {currentTime}</p>\n    </div>\n    <div class=\"game-data\">\n        <div>\n            <AnimatedStat label=\"Points\" value={points} />\n            <AnimatedStat\n                label=\"Ready to harvest\"\n                value={teaStats.current.ready.total}\n            />\n            <AnimatedStat\n                label=\"Ready to brew\"\n                value={teaStats.current.harvested.total}\n            />\n            <AnimatedStat label=\"Ready to serve\" value={brewedTea} />\n        </div>\n        <div>\n            <AnimatedStat label=\"Garden Sprites\" value={sprites.garden} />\n            <AnimatedStat label=\"Harvest Sprites\" value={sprites.harvest} />\n            <AnimatedStat\n                label=\"Brewmaster Sprites\"\n                value={sprites.brewmaster}\n            />\n            <AnimatedStat label=\"Cafe Sprites\" value={sprites.cafe} />\n        </div>\n        <div>\n            <AnimatedStat label=\"Garden Plots\" value={gardenPlots} />\n            <AnimatedStat label=\"Teapots\" value={teapots} />\n            <!-- Keep the save indicator as is -->\n            {#if lastSavedTime}\n                <p class=\"label save-indicator\">\n                    Saved at {lastSavedTime.toLocaleTimeString([], {\n                        timeStyle: \"short\",\n                    })}\n                </p>\n            {/if}\n            <button class=\"secondary save-game\" on:click={saveGameState}>\n                Save Game\n            </button>\n        </div>\n    </div>\n\n    <Shop\n        {points}\n        {unlockedTeaTypes}\n        on:purchase={handlePurchase}\n        on:reset={resetGame}\n    />\n\n    <div class=\"inventory\">\n        <details class=\"inventory-details\">\n            <summary class=\"inventory-title\">Detailed stats</summary>\n            <div>\n                {#each Object.entries(TEA) as [type, config]}\n                    {#if unlockedTeaTypes[type]}\n                        <div class=\"tea-type-inventory\">\n                            <h2>{config.name}</h2>\n                            <AnimatedStat\n                                label=\"Ready to harvest\"\n                                value={teaStats.current.ready.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Ready to brew\"\n                                value={teaStats.current.harvested.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Ready to serve\"\n                                value={teaStats.current.brewed.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Grown\"\n                                value={teaStats.lifetime.grown.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Harvested\"\n                                value={teaStats.lifetime.harvested.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Brewed\"\n                                value={teaStats.lifetime.brewed.byType[type]}\n                            />\n                            <AnimatedStat\n                                label=\"Served\"\n                                value={teaStats.lifetime.served.byType[type]}\n                            />\n                        </div>\n                    {/if}\n                {/each}\n            </div>\n        </details>\n    </div>\n\n    <div class=\"teashop-garden\">\n        <h2>Garden</h2>\n        <div class=\"teashop-flex\">\n            {#each [...Array(gardenPlots).keys()] as i (i)}\n                <GardenPlot\n                    {unlockedTeaTypes}\n                    on:plantReady={handlePlantReady}\n                    on:harvestStart={handleHarvestStart}\n                    on:plantComplete={handlePlantComplete}\n                    bind:this={plotRefs[i]}\n                    class=\"garden-plot\"\n                />\n            {/each}\n        </div>\n    </div>\n\n    <div class=\"teashop-teapots\">\n        <h2>Teapots</h2>\n        <div class=\"tea-inventory\">\n            <p class=\"label\">\n                <AnimatedStat\n                    label=\"Ready to brew\"\n                    value={teaStats.current.harvested.total}\n                />\n            </p>\n        </div>\n        <div class=\"teashop-flex\">\n            {#each [...Array(teapots).keys()] as i (i)}\n                <Teapot\n                    {harvestedTeas}\n                    bind:this={teapotRefs[i]}\n                    on:useTea={handleHarvestedTea}\n                    on:teaBrewed={handleBrewedTea}\n                    class=\"teapot\"\n                />\n            {/each}\n        </div>\n    </div>\n\n    <div class=\"teashop-serve-container\">\n        <p class=\"label\">\n            <AnimatedStat label=\"Ready to serve\" value={brewedTea} />\n        </p>\n        <button\n            class=\"secondary teashop-serve\"\n            on:click={serveTea}\n            disabled={brewedTea < 1}\n        >\n            Serve {nextServed} Tea</button\n        >\n    </div>\n</div>\n\n<div class=\"toast-container\">\n    {#each toasts as toast (toast.id)}\n        <div\n            class=\"toast {toast.type}\"\n            style=\"\n                            --x: {toast.x}px;\n                            --opacity: {toast.opacity};\n                        \"\n        >\n            {toast.message}\n        </div>\n    {/each}\n</div>\n\n<style>\n    .game-data {\n        display: grid;\n        grid-auto-rows: 1fr;\n        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n        gap: 8px 8px;\n        justify-content: space-around;\n        justify-items: stretch;\n        margin-bottom: 36px;\n    }\n\n    .teashop-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\n        grid-auto-rows: 1fr;\n        gap: 8px 8px;\n    }\n\n    .inventory {\n        margin-top: 14px;\n        display: block;\n    }\n\n    .inventory-details {\n        background-color: var(--oat);\n        padding: 16px;\n        border-radius: 6px;\n        margin-bottom: 12px;\n    }\n\n    .inventory-title {\n        list-style: none;\n        font-family: \"Departure Mono\", sans-serif;\n        text-transform: uppercase;\n        font-size: small;\n    }\n\n    .inventory-title:hover {\n        cursor: pointer;\n    }\n\n    .teashop-details .label {\n        margin-top: 16px;\n        margin-bottom: 0;\n    }\n\n    .teashop-serve-container {\n        margin-top: 36px;\n        text-align: right;\n    }\n\n    /* toasts */\n\n    .toast-container {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        width: 100%;\n        height: 100%;\n    }\n\n    .toast {\n        position: absolute;\n        bottom: 0;\n        left: 4px;\n        padding: 8px;\n        font-size: 14px;\n        font-family: \"Departure Mono\";\n        color: var(--tea);\n        animation: float-up 2s ease-out forwards;\n        white-space: nowrap;\n    }\n\n    .toast.success {\n        bottom: 6px;\n        color: var(--matcha);\n        animation: float-up 4s ease-out forwards;\n    }\n\n    .toast.error {\n        bottom: 6px;\n        color: var(--puff);\n        animation: float-up 4s ease-out forwards;\n    }\n\n    .toast.sunrise {\n        bottom: 3px;\n        color: var(--comfy);\n        animation: float-up 8s ease-out forwards;\n    }\n\n    .toast.sunset {\n        bottom: 3px;\n        color: var(--beam);\n        animation: float-up 8s ease-out forwards;\n    }\n\n    .toast.night {\n        bottom: 3px;\n        color: var(--joycon);\n        animation: float-up 8s ease-out forwards;\n    }\n\n    @keyframes float-up {\n        0% {\n            transform: translateY(0);\n            opacity: 1;\n        }\n        100% {\n            transform: translateY(-50px);\n            opacity: 0;\n        }\n    }\n\n    /* time indicators */\n\n    .time-indicator {\n        margin-bottom: 1em;\n    }\n\n    .time-indicator.sunrise > p {\n        color: var(--beam);\n    }\n\n    .time-indicator.day > p {\n        color: var(--comfy);\n    }\n\n    .time-indicator.sunset > p {\n        color: var(--beam);\n    }\n\n    .time-indicator.night > p {\n        color: var(--joycon);\n    }\n</style>\n"],
  "mappings": ";AA0CI,CAAA,YAAA,CAAA;AACI,cAAA,MAAA;AACR;AAEI,CAJA,YAIa,CAAA,SAAA,CAJb;AAKI,SAAA;AACR;;;ACssBI,CAAA,SAAA,CAAA;AACI,WAAA;AACA,kBAAA;AACA,yBAAA,OAAA,QAAA,EAAA,OAAA,KAAA,EAAA;AACA,OAAA,IAAA;AACA,mBAAA;AACA,iBAAA;AACA,iBAAA;AACR;AAEI,CAAA,YAAA,CAVA;AAWI,WAAA;AACA,yBAAA,OAAA,QAAA,EAAA,OAAA,KAAA,EAAA;AACA,kBAAA;AACA,OAAA,IAAA;AACR;AAEI,CAAA,SAAA,CAjBA;AAkBI,cAAA;AACA,WAAA;AACR;AAEI,CAAA,iBAAA,CAtBA;AAuBI,oBAAA,IAAA;AACA,WAAA;AACA,iBAAA;AACA,iBAAA;AACR;AAEI,CAAA,eAAA,CA7BA;AA8BI,cAAA;AACA,eAAA,gBAAA,EAAA;AACA,kBAAA;AACA,aAAA;AACR;AAEI,CAPA,eAOA,CApCA,aAoCgB;AACZ,UAAA;AACR;AAOI,CAAA,uBAAA,CA7CA;AA8CI,cAAA;AACA,cAAA;AACR;AAII,CAAA,eAAA,CApDA;AAqDI,YAAA;AACA,UAAA;AACA,QAAA;AACA,kBAAA;AACA,SAAA;AACA,UAAA;AACR;AAEI,CAAA,KAAA,CA7DA;AA8DI,YAAA;AACA,UAAA;AACA,QAAA;AACA,WAAA;AACA,aAAA;AACA,eAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACX,eAAA;AACR;AAEI,CAZA,KAYM,CAAA,OAAA,CAzEN;AA0EI,UAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACnB;AAEI,CAlBA,KAkBM,CAAA,KAAA,CA/EN;AAgFI,UAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACnB;AAEI,CAxBA,KAwBM,CAAA,OAAA,CArFN;AAsFI,UAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACnB;AAEI,CA9BA,KA8BM,CAAA,MAAA,CA3FN;AA4FI,UAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACnB;AAEI,CApCA,KAoCM,CAAA,KAAA,CAjGN;AAkGI,UAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACnB;AAEI,WAlCI;AAmCR;AACA,eAAA,WAAA;AACA,aAAA;AACA;AACA;AACA,eAAA,WAAA;AACA,aAAA;AACA;AACA;AAII,CAAA,cAAA,CApHA;AAqHI,iBAAA;AACR;AAEI,CAJA,cAIe,CAnCT,OAmCS,CAxHf,cAwHwB,EAAE,CAAA,OAAA,CAxH1B;AAyHI,SAAA,IAAA;AACR;AAEI,CARA,cAQe,CAAA,GAAA,CA5Hf,cA4HoB,EAAE,CAAA,OAAA,CA5HtB;AA6HI,SAAA,IAAA;AACR;AAEI,CAZA,cAYe,CArCT,MAqCS,CAhIf,cAgIuB,EAAE,CAAA,OAAA,CAhIzB;AAiII,SAAA,IAAA;AACR;AAEI,CAhBA,cAgBe,CAnCT,KAmCS,CApIf,cAoIsB,EAAE,CAAA,OAAA,CApIxB;AAqII,SAAA,IAAA;AACR;",
  "names": []
}
