{
  "version": 3,
  "sources": ["Teashop.svelte"],
  "sourcesContent": ["<script>\n    import { TIMINGS } from \"../config.js\";\n    import GardenPlot from \"./GardenPlot.svelte\";\n    import Teapot from \"./Teapot.svelte\";\n    import Shop from \"./Shop.svelte\";\n    import { onMount, onDestroy } from \"svelte\";\n    import { createEventDispatcher } from \"svelte\";\n    const dispatch = createEventDispatcher();\n\n    let harvestedPlants = 0;\n    let brewedTea = 0;\n    let servedTea = 0;\n    let points = 0;\n    let gardenPlots = 1;\n    let teapots = 1;\n    let automationIntervals = [];\n\n    let toasts = [];\n    let toastId = 0;\n\n    let sprites = {\n        harvest: 0,\n        brewmaster: 0,\n        garden: 0,\n        cafe: 0,\n    };\n\n    let workingSprites = {\n        garden: 0,\n        harvest: 0,\n        brewmaster: 0,\n        cafe: 0,\n    };\n\n    // References to components that need automation\n    let plotRefs = [];\n    let teapotRefs = [];\n\n    // Make arrays reactive to component count changes\n    $: {\n        plotRefs = [...Array(gardenPlots)].map((_, i) => plotRefs[i] || null);\n        console.log(\"Updated plotRefs:\", plotRefs);\n    }\n\n    $: {\n        teapotRefs = [...Array(teapots)].map((_, i) => teapotRefs[i] || null);\n        console.log(\"Updated teapotRefs:\", teapotRefs);\n    }\n\n    function createToast() {\n        const id = toastId++;\n        const x = Math.random() * 40 - 20; // Random x position offset\n        const toast = {\n            id,\n            x,\n            y: 0,\n            opacity: 1,\n            points: 5,\n        };\n        toasts = [...toasts, toast];\n\n        // Remove the toast after animation\n        setTimeout(() => {\n            toasts = toasts.filter((t) => t.id !== id);\n        }, 2000);\n    }\n\n    function serveTea() {\n        if (brewedTea >= 1) {\n            brewedTea -= 1;\n            servedTea += 1;\n            points += 5;\n            dispatch(\"teaServed\");\n            createToast();\n        }\n    }\n\n    function handlePurchase(event) {\n        const { item, cost, spriteType } = event.detail;\n        console.log(\"Purchase:\", { item, cost, spriteType });\n\n        if (item === \"gardenPlot\") {\n            gardenPlots += 1;\n            points -= cost;\n        } else if (item === \"teapot\") {\n            teapots += 1;\n            points -= cost;\n        } else if (item === \"sprite\") {\n            sprites[spriteType] += 1;\n            points -= cost;\n            console.log(\"Updated sprites:\", sprites);\n            startAutomation();\n        }\n    }\n\n    function handlePlantComplete() {\n        harvestedPlants += 2;\n    }\n\n    function handleHarvestedTea() {\n        harvestedPlants -= 1;\n    }\n\n    function handleBrewedTea() {\n        brewedTea += 1;\n    }\n\n    function startAutomation() {\n        console.log(\"Starting automation\");\n        console.log(\"Current sprites:\", sprites);\n        console.log(\"Total plots:\", gardenPlots);\n        console.log(\"Total teapots:\", teapots);\n        console.log(\"plotRefs length:\", plotRefs.length);\n        console.log(\"teapotRefs length:\", teapotRefs.length);\n        console.log(\"Full plotRefs array:\", plotRefs);\n        console.log(\"Full teapotRefs array:\", teapotRefs);\n\n        // Clear existing intervals\n        automationIntervals.forEach((interval) => clearInterval(interval));\n        automationIntervals = [];\n\n        // Harvest Sprites\n        if (sprites.harvest > 0) {\n            const interval = setInterval(() => {\n                if (workingSprites.harvest < sprites.harvest) {\n                    for (let i = 0; i < plotRefs.length; i++) {\n                        const plot = plotRefs[i];\n                        if (plot) {\n                            const state = plot.getState();\n                            if (state.readyToHarvest) {\n                                workingSprites.harvest += 1;\n                                plot.harvest();\n                                // Harvesting is instant, but add a small cooldown\n                                setTimeout(() => {\n                                    workingSprites.harvest -= 1;\n                                }, TIMINGS.HARVEST_COOLDOWN);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Brewmaster Sprites\n        if (sprites.brewmaster > 0) {\n            const interval = setInterval(() => {\n                if (workingSprites.brewmaster < sprites.brewmaster) {\n                    for (let i = 0; i < teapotRefs.length; i++) {\n                        const teapot = teapotRefs[i];\n                        if (teapot) {\n                            const state = teapot.getState();\n                            if (!state.isBrewing && harvestedPlants > 0) {\n                                workingSprites.brewmaster += 1;\n                                teapot.brewTea();\n                                // After brewing is done (10 seconds)\n                                setTimeout(() => {\n                                    workingSprites.brewmaster -= 1;\n                                }, TIMINGS.BREW_TIME);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Garden Sprites\n        if (sprites.garden > 0) {\n            const interval = setInterval(() => {\n                if (workingSprites.garden < sprites.garden) {\n                    for (let i = 0; i < plotRefs.length; i++) {\n                        const plot = plotRefs[i];\n                        if (plot) {\n                            const state = plot.getState();\n                            if (!state.isGrowing && !state.readyToHarvest) {\n                                workingSprites.garden += 1;\n                                plot.plantTea();\n                                setTimeout(() => {\n                                    workingSprites.garden -= 1;\n                                }, TIMINGS.GARDEN_COOLDOWN);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n        // Cafe Sprites\n        if (sprites.cafe > 0) {\n            const interval = setInterval(() => {\n                if (workingSprites.cafe < sprites.cafe) {\n                    for (let i = 0; i < teapotRefs.length; i++) {\n                        const teapot = teapotRefs[i];\n                        if (teapot) {\n                            const state = teapot.getState();\n                            if (state.brewedTea > 0) {\n                                workingSprites.cafe += 1;\n                                serveTea();\n                                // Serving is instant, but add a small cooldown\n                                setTimeout(() => {\n                                    workingSprites.cafe -= 1;\n                                }, TIMINGS.SERVE_COOLDOWN);\n                            }\n                        }\n                    }\n                }\n            }, 1000);\n            automationIntervals.push(interval);\n        }\n    }\n\n    onMount(() => {\n        console.log(\"Component mounted\");\n        startAutomation();\n    });\n\n    onDestroy(() => {\n        automationIntervals.forEach((interval) => clearInterval(interval));\n    });\n</script>\n\n<div class=\"teashop-container\">\n    <div class=\"stats\">\n        <p class=\"label\">Points: {points}</p>\n        <p class=\"label\">Plants Harvested: {harvestedPlants}</p>\n        <p class=\"label\">Tea Brewed: {brewedTea}</p>\n        <p class=\"label\">Total Cups Served: {servedTea}</p>\n    </div>\n    <div class=\"sprites\">\n        <p class=\"label\">Harvest Sprites: {sprites.harvest}</p>\n        <p class=\"label\">Brewmaster Sprites: {sprites.brewmaster}</p>\n        <p class=\"label\">Garden Sprites: {sprites.garden}</p>\n        <p class=\"label\">Cafe Sprites: {sprites.cafe}</p>\n    </div>\n\n    <Shop {points} on:purchase={handlePurchase} />\n    <div class=\"teashop-garden\">\n        <h2>Garden</h2>\n        {#each [...Array(gardenPlots).keys()] as i (i)}\n            <GardenPlot\n                on:plantComplete={handlePlantComplete}\n                bind:this={plotRefs[i]}\n            />\n        {/each}\n    </div>\n\n    <div class=\"teashop-teapots\">\n        <h2>Teapots</h2>\n        <p class=\"label\">Ready to brew: {harvestedPlants}</p>\n        {#each [...Array(teapots).keys()] as i (i)}\n            <Teapot\n                {harvestedPlants}\n                bind:this={teapotRefs[i]}\n                on:useTea={handleHarvestedTea}\n                on:teaBrewed={handleBrewedTea}\n            />\n        {/each}\n        <div class=\"teashop-serve-container\">\n            <p class=\"label\">Ready to serve: {brewedTea}</p>\n            <div class=\"toast-container\">\n                {#each toasts as toast (toast.id)}\n                    <div\n                        class=\"toast\"\n                        style=\"\n                                    --x: {toast.x}px;\n                                    --opacity: {toast.opacity};\n                                \"\n                    >\n                        +{toast.points} points!\n                    </div>\n                {/each}\n            </div>\n            <button\n                class=\"teashop-serve\"\n                on:click={serveTea}\n                disabled={brewedTea < 1}\n            >\n                Serve Tea</button\n            >\n        </div>\n    </div>\n</div>\n\n<style>\n    .toast-container {\n        position: absolute;\n        right: 0;\n        bottom: 100%;\n        pointer-events: none;\n    }\n\n    .toast {\n        position: absolute;\n        right: var(--x);\n        padding: 8px;\n        font-size: 14px;\n        font-family: \"Departure Mono\";\n        color: var(--tea);\n        animation: float-up 2s ease-out forwards;\n        white-space: nowrap;\n    }\n\n    @keyframes float-up {\n        0% {\n            transform: translateY(0);\n            opacity: 1;\n        }\n        100% {\n            transform: translateY(-50px);\n            opacity: 0;\n        }\n    }\n\n    .teashop-serve-container {\n        margin-top: 36px;\n        float: right;\n        text-align: right;\n        position: relative;\n    }\n</style>\n"],
  "mappings": ";AA8RI,CAAA,eAAA,CAAA;AACI,YAAA;AACA,SAAA;AACA,UAAA;AACA,kBAAA;AACR;AAEI,CAAA,KAAA,CAPA;AAQI,YAAA;AACA,SAAA,IAAA;AACA,WAAA;AACA,aAAA;AACA,eAAA;AACA,SAAA,IAAA;AACA,aAAA,uBAAW,GAAA,SAAA;AACX,eAAA;AACR;AAEI,WAJI;AAKR;AACA,eAAA,WAAA;AACA,aAAA;AACA;AACA;AACA,eAAA,WAAA;AACA,aAAA;AACA;AACA;AAEI,CAAA,uBAAA,CA7BA;AA8BI,cAAA;AACA,SAAA;AACA,cAAA;AACA,YAAA;AACR;",
  "names": []
}
